document.addEventListener('DOMContentLoaded', () => {
    const tabs = document.querySelectorAll('.tab');
    const contents = document.querySelectorAll('.tab-content');

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // Active l'onglet cliqu√©
            tabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');

            // Affiche le contenu correspondant
            contents.forEach(c => c.style.display = 'none');
            document.getElementById(tab.dataset.tab).style.display = 'block';
        });
    });
});


// -------------------- SAVE CV --------------------
document.getElementById("saveCvBtn").addEventListener("click", () => {
    const cv = document.getElementById("cvInput").value;
    chrome.storage.local.set({ userCV: cv }, () => {
        const msg = document.getElementById("message");
        msg.textContent = "CV saved successfully!";
        setTimeout(() => msg.textContent = "", 2000);
    });
});

// -------------------- SAVE API KEY --------------------
document.getElementById("saveApiKeyBtn").addEventListener("click", () => {
    const apiKey = document.getElementById("apiKeyInput").value;
    chrome.storage.local.set({ userApiKey: apiKey }, () => {
        const msg = document.getElementById("message");
        msg.textContent = "API key saved ‚úÖ";
        setTimeout(() => msg.textContent = "", 2000);
    });
});

// -------------------- LOAD CV ON POPUP LOAD --------------------
document.addEventListener("DOMContentLoaded", () => {
    chrome.storage.local.get("userCV", (data) => {
        if(data.userCV) document.getElementById("cvInput").value = data.userCV;
    });
    chrome.storage.local.get("userApiKey", (data) => {
        if(data.userApiKey) document.getElementById("apiKeyInput").value = data.userApiKey;
    });
    chrome.storage.local.get("generatedLetter", (data) => {
        if (data.generatedLetter) {
            document.getElementById("output").value = data.generatedLetter;
        }
    });
});

// -------------------- GENERATE LETTER --------------------
document.addEventListener("DOMContentLoaded", async () => {
    // Charger la lettre sauvegard√©e si elle existe
    chrome.storage.local.get("generatedLetter", (data) => {
        if (data.generatedLetter) {
            document.getElementById("output").value = data.generatedLetter;
        }
    });
});

document.getElementById("generateBtn").addEventListener("click", async () => {
    const getCV = () => new Promise(resolve => chrome.storage.local.get("userCV", resolve));
    const data = await getCV();
    const cv = data.userCV || "";
    const errorMsg = document.getElementById("errorMsg");
    const output = document.getElementById("output");

    if (!cv) {
        errorMsg.textContent = "‚ö†Ô∏è Please enter your CV first.";
        errorMsg.style.display = "block";
        return;
    } else {
        errorMsg.style.display = "none";
    }

    output.value = "‚è≥ Generating‚Ä¶ please wait";

    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
        chrome.tabs.sendMessage(tabs[0].id, { action: "getPageText" }, async (response) => {
            const jobText = response?.text || "";
            const language = document.getElementById("languageSelect").value;

            // Date du jour
            const today = new Date();
            const day = String(today.getDate()).padStart(2, '0');
            const month = String(today.getMonth() + 1).padStart(2, '0');
            const year = today.getFullYear();
            const currentDate = `${day}/${month}/${year}`;

            // Mapping langues
            const languageMap = {
                fr: "French", en: "English", es: "Spanish", de: "German", it: "Italian",
                pt: "Portuguese", nl: "Dutch", sv: "Swedish", no: "Norwegian",
                da: "Danish", fi: "Finnish", pl: "Polish", ru: "Russian",
                ja: "Japanese", zh: "Chinese", ko: "Korean", ar: "Arabic"
            };
            const langName = languageMap[language] || "English";

            const prompt = `
CV:
${cv}

Position:
${jobText}

Write a complete, professional cover letter in ${langName} that is directly ready to send. 
- Include relevant elements from my CV to highlight my skills and experience for the position. 
- Use natural, readable language with standard paragraph formatting (no markdown, no brackets, no bullet points). 
- Keep the letter concise, clear, and polite, ready to be sent by email. 
- Do not include placeholders or generic text.
- The letter must be in ${langName}.
- The letter must be between 250 and 400 words.
- Use the job title and the company name in the subject line if possible.
- Use a professional tone suitable for a job application.
- Do not mention that the letter was generated by AI.
- Do not include any notes or explanations outside the letter content.
- Do NOT use any placeholders or text in brackets (e.g., [Your Address], [City], etc.). 
- If the information is not provided in the CV, simply omit it.
Date: ${currentDate}
`;

            const letter = await generateWithGemini(prompt, errorMsg);
            if (letter) {
                output.value = letter;

                // üß† Sauvegarder la lettre g√©n√©r√©e
                chrome.storage.local.set({ generatedLetter: letter }, () => {
                    console.log("‚úÖ Letter saved in storage.");
                });
            } else {
                output.value = "";
            }
        });
    });
});


// -------------------- FETCH GEMINI --------------------
async function generateWithGemini(prompt, errorMsgElement) {
    const storageData = await new Promise(resolve => chrome.storage.local.get("userApiKey", resolve));
    const apiKey = storageData.userApiKey;

    if (!apiKey) {
        if (errorMsgElement) {
            errorMsgElement.textContent = "‚ö†Ô∏è Please enter your API key.";
            errorMsgElement.style.display = "block";
        }
        return null;
    }

    const payload = {
        contents: [{ parts: [{ text: prompt }] }]
    };

    try {
        const response = await fetch(
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent",
            {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "x-goog-api-key": apiKey
                },
                body: JSON.stringify(payload)
            }
        );

        const responseData = await response.json();
        return responseData.candidates?.[0]?.content?.parts?.[0]?.text || "No response from Gemini.";
    } catch (err) {
        console.error("Error generating letter:", err);
        return "Error generating letter: " + err.message;
    }
}

document.getElementById("downloadBtn").addEventListener("click", async () => {

  // Envoie la lettre au background pour t√©l√©chargement
  chrome.runtime.sendMessage({ action: "downloadLetter" });
});

